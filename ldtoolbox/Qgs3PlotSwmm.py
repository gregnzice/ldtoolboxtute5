# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Qgs3Epanet Post Processing
                                 A QGIS plugin
 Implementation of Epanet within QGIS3.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        Date                : July 2018
        Copyright            : (C) 2018 by Greg Leonard
        Email                : greg.h.leonard@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Greg Leonard'
__date__ = 'July 2018'
__copyright__ = '(C) 2018 by Greg Leonard'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import getpass
import io
import datetime
import re
import subprocess
from operator import itemgetter
from numpy import mean
from datetime import datetime
import matplotlib
matplotlib.use('Qt5Agg')
from pylab import HourLocator,DateFormatter,figure
#from processing.core.ProcessingLog import ProcessingLog
from processing.core.ProcessingConfig import ProcessingConfig, Setting
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QCoreApplication,QVariant
from qgis.core import (QgsProcessing,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingUtils,
                       QgsProcessingParameterString,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterBoolean,
                       QgsDefaultValue,
                       QgsVectorLayer,
                       QgsProject,
                       QgsField,
                       QgsFields,
                       QgsWkbTypes,
                       QgsFeature,
                       QgsVectorLayerJoinInfo,
                       QgsProcessingParameterFeatureSink)

class Qgs3PlotSwmm(QgsProcessingAlgorithm):
    SUBCATCHMENT_TO_PLOT=set()
    NODES_TO_PLOT=set()
    SUB_DICT={}
    NODE_DICT={}
    SUBCATCHMENTS      = 'SUBCATCHMENTS'
    NODES              = 'NODES'
    SUBCATCHMENT_OUTPUT = 'Subcatchment_output_layer'
    NODE_OUTPUT = 'Node_output_layer'
    NODEBOOLINFLOW='nodeboolinflow'
    NODEBOOLFLOODING='nodeboolflooding'
    NODEBOOLDEPTH='nodebooldepth'
    NODEBOOLHEAD='nodeboolhead'

    def initAlgorithm(self, config):
        """
        """
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        for layer in layers:
            if layer.name().lower() == self.SUBCATCHMENT_OUTPUT.lower():
                for feature in layer.getFeatures():
                    self.SUBCATCHMENT_TO_PLOT.add(feature['Subcatchment'])
            if layer.name().lower() == self.NODE_OUTPUT.lower():
                for feature in layer.getFeatures():
                    self.NODES_TO_PLOT.add(feature['Node'])
        for i,member in enumerate(self.SUBCATCHMENT_TO_PLOT):
                self.SUB_DICT[i]=member
        for i,member in enumerate(self.NODES_TO_PLOT):
                self.NODE_DICT[i]=member
        self.addParameter(QgsProcessingParameterEnum(self.SUBCATCHMENTS,'Subcatchment to plot',self.SUBCATCHMENT_TO_PLOT))
        self.addParameter(QgsProcessingParameterEnum(self.NODES,'List of nodes',self.NODES_TO_PLOT,allowMultiple=True))
        self.addParameter(QgsProcessingParameterBoolean(self.NODEBOOLINFLOW,'Plot inflows?',True,False))
        self.addParameter(QgsProcessingParameterBoolean(self.NODEBOOLFLOODING,'Plot flooding?',True,False))
    def processAlgorithm(self, parameters, context, feedback):
        """
        """

        subcatchment=self.SUB_DICT[self.parameterAsEnum(parameters,self.SUBCATCHMENTS,context)]
        node_set=self.parameterAsEnums(parameters,self.NODES,context)
        #QgsMessageLog.logMessage(str(node_set),tag="SWMM Processing")
        plotnode=[]
        for i, member in enumerate(list(node_set)):
            plotnode.append(self.NODE_DICT[member])

        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        for layer in layers:

            if layer.name().lower() == self.SUBCATCHMENT_OUTPUT.lower():
                id=[]
                time=[]
                precip=[]
                losses=[]
                runoff=[]
                for feature in layer.getFeatures():
                    if feature['Subcatchment']==subcatchment:
                        id.append(feature['id'])
                        time.append(datetime.strptime(feature['Time'],"%Y-%m-%d %H:%M:%S"))
                        precip.append(float(feature['Precip']))
                        losses.append(float(feature['Losses']))
                        runoff.append(float(feature['Runoff']))
            if layer.name().lower() == self.NODE_OUTPUT.lower():
                node_id=[]
                node_time=[]
                node_inflow=[]
                node_flooding=[]
                node_depth=[]
                node_head=[]

                for i,node in enumerate(plotnode):
                    idtemp=[]
                    timetemp=[]
                    inflowtemp=[]
                    floodingtemp=[]
                    depthtemp=[]
                    headtemp=[]
                    for feature in layer.getFeatures():
                        if feature['Node']==node:
                            idtemp.append(feature['id'])
                            timetemp.append(datetime.strptime(feature['Time'],"%Y-%m-%d %H:%M:%S"))
                            inflowtemp.append(float(feature['Inflow']))
                            floodingtemp.append(float(feature['Flooding']))
                            depthtemp.append(float(feature['Depth']))
                            headtemp.append(float(feature['Head']))
                    node_id.append(idtemp)
                    node_time.append(timetemp)
                    node_inflow.append(inflowtemp)
                    node_flooding.append(floodingtemp)
                    node_depth.append(depthtemp)
                    node_head.append(headtemp)
        hour1=HourLocator(interval=3)
        HoursFmt = DateFormatter("%H:%M")
        fig=figure()
        ax=fig.add_subplot(111)
        ax.set_ylim([0,350])
        for i,node in enumerate(plotnode):
            if self.parameterAsBool(parameters,self.NODEBOOLINFLOW,context):
                ax.plot(node_time[i],node_inflow[i],label=str(plotnode[i])+ ' inflow')
            if self.parameterAsBool(parameters,self.NODEBOOLFLOODING,context):
                ax.plot(node_time[i],node_flooding[i],label=str(plotnode[i])+ ' flooding')
        ax2 = ax.twinx()
        ax2.bar(time,precip,.02)
        ax2.set_ylim([0,100])
        ax.set_yticks([0,50,100,150,200,250])
        ax.set_ylabel('Inflow rate / litres s$^{-1}$')
        ax2.yaxis.tick_right()
        ax2.set_yticks([0,10,20,30,40])
        ax2.set_ylabel('Rainfall intensity / mm hr$^{-1}$')
        ax2.invert_yaxis()
        ax.set_title('SWMM output for Subcatchment '+subcatchment)
        ax.xaxis.set_major_locator(hour1)
        ax.xaxis.set_major_formatter(HoursFmt)
        ax.legend()
        fig.show()
        return  {'figure':fig,'axis1':ax,'axis2':ax2,'node_time':node_time,'node_flooding':node_flooding}
    def name(self):
        return 'swmmplot'
    def tr(self, string):
        return QCoreApplication.translate('swmmplot', string)

    def icon(self):
        return QIcon(":/plugins/ldtoolbox/swmm.png")

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Plot SWMM output')
    def shortHelpString(self):
        file=os.path.realpath(__file__)
        file = os.path.join(os.path.dirname(file),'Qgs3PlotSwmm.help')
        if not os.path.exists(file):
            return ''
        with open(file) as helpf:
            help=helpf.read()
        return help

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'SWMM'

    def flags(self):
        return super().flags() | QgsProcessingAlgorithm.FlagNoThreading | QgsProcessingAlgorithm.FlagDisplayNameIsLiteral

    def createInstance(self):
        return Qgs3PlotSwmm()
